WARNING: You're attempting to print out a bitcode file.
This is inadvisable as it may cause display problems. If
you REALLY want to taste LLVM bitcode first-hand, you
can force output with the `-f' option.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f
digraph "f" {
}
Processing block 'entry'
Apron: Instruction: 8: sub <- (0 - y)
Apron: Instruction: 7: x.0 <- ((y < 0) ? (0 - y) : 5)
entry: interval of dim (3,0):
     sub in [-oo,+oo]
     x.0 in [-oo,+oo]
       y in [-oo,+oo]

Ranges:
	sub: [-oo,+oo]
	x.0: [-oo,+oo]
	y: [-oo,+oo]
: isModified: 0
Apron: Library box, version 1.0 with NUM_MPQ
entry: interval of dim (3,0):
     sub in [-oo,+oo]
     x.0 in [-oo,+oo]
       y in [-oo,+oo]

Ranges:
	sub: [-oo,+oo]
	x.0: [-oo,+oo]
	y: [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f2
digraph "f2" {
}
Processing block 'entry'
Apron: Instruction: 18: sub <- (1 - y)
Apron: Instruction: 18: sub1 <- (sub - z)
entry: interval of dim (4,0):
     sub in [-oo,+oo]
    sub1 in [-oo,+oo]
       y in [-oo,+oo]
       z in [-oo,+oo]

Ranges:
	sub: [-oo,+oo]
	sub1: [-oo,+oo]
	y: [-oo,+oo]
	z: [-oo,+oo]
: isModified: 0
Apron: Library box, version 1.0 with NUM_MPQ
entry: interval of dim (4,0):
     sub in [-oo,+oo]
    sub1 in [-oo,+oo]
       y in [-oo,+oo]
       z in [-oo,+oo]

Ranges:
	sub: [-oo,+oo]
	sub1: [-oo,+oo]
	y: [-oo,+oo]
	z: [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f3
digraph "f3" {
	"entry" -> "return"
	"entry" -> "for.cond.preheader"
	"for.cond.preheader" -> "for.body.lr.ph"
	"for.cond.preheader" -> "return"
	"for.body.lr.ph" -> "return"
}
Processing block 'entry'
Apron: Instruction: 23: %9 <- %9
Condition: cmp <- (y > 100)
Condition: cmp <- (y > 100)
Condition: cmp <- (y > 100)
Condition: cmp <- (y > 100)
entry: interval of dim (1,0): bottom

Ranges:
	y: [1,-1]
: isModified: 0
entry -> return
entry -> for.cond.preheader
Processing block 'return'
Apron: Instruction: 0: retval.0 <- phi ( entry -> -1 ) ( for.body.lr.ph -> %10 ) ( for.cond.preheader -> 0 )
return: interval of dim (3,0): bottom

Ranges:
	%10: [1,-1]
	retval.0: [1,-1]
	y: [1,-1]
: isModified: 1
Processing block 'for.cond.preheader'
Apron: Instruction: 27: %12 <- %12
Condition: cmp16 <- (y > 1)
Condition: cmp16 <- (y > 1)
Condition: cmp16 <- (y > 1)
Condition: cmp16 <- (y > 1)
for.cond.preheader: interval of dim (3,0):
     %10 in [-oo,+oo]
retval.0 in [-oo,+oo]
       y in [-oo,-100]

Ranges:
	%10: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [+oo,-100]
: isModified: 1
for.cond.preheader -> for.body.lr.ph
for.cond.preheader -> return
Processing block 'for.body.lr.ph'
Apron: Instruction: 27: %13 <- (y  <<  1)
Apron: Instruction: 27: %14 <- (y + -2)
Apron: Instruction: 0: %15 <- cast(%14)
Apron: Instruction: 27: %16 <- (y + -3)
Apron: Instruction: 0: %17 <- cast(%16)
Apron: Instruction: 27: %18 <- (%15 * %17)
Apron: Instruction: 27: %19 <- (%18  <<  1)
Apron: Instruction: 0: %20 <- cast(%19)
Apron: Instruction: 27: %21 <- (%13 + %20)
Apron: Instruction: 27: %10 <- (%21 + -3)
Apron: Instruction: 27: %22 <- %22
for.body.lr.ph: interval of dim (12,0):
     %10 in [-oo,+oo]
     %13 in [-oo,+oo]
     %14 in [-oo,+oo]
     %15 in [-oo,+oo]
     %16 in [-oo,+oo]
     %17 in [-oo,+oo]
     %18 in [-oo,+oo]
     %19 in [-oo,+oo]
     %20 in [-oo,+oo]
     %21 in [-oo,+oo]
retval.0 in [-oo,+oo]
       y in [-oo,-100]

Ranges:
	%10: [-oo,+oo]
	%13: [-oo,+oo]
	%14: [-oo,+oo]
	%15: [-oo,+oo]
	%16: [-oo,+oo]
	%17: [-oo,+oo]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,-100]
: isModified: 1
for.body.lr.ph -> return
Processing block 'return'
Apron: Instruction: 0: retval.0 <- phi ( entry -> -1 ) ( for.body.lr.ph -> %10 ) ( for.cond.preheader -> 0 )
return: interval of dim (12,0):
     %10 in [-oo,+oo]
     %13 in [-oo,+oo]
     %14 in [-oo,+oo]
     %15 in [-oo,+oo]
     %16 in [-oo,+oo]
     %17 in [-oo,+oo]
     %18 in [-oo,+oo]
     %19 in [-oo,+oo]
     %20 in [-oo,+oo]
     %21 in [-oo,+oo]
retval.0 in [-oo,+oo]
       y in [-oo,-100]

Ranges:
	%10: [-oo,+oo]
	%13: [-oo,+oo]
	%14: [-oo,+oo]
	%15: [-oo,+oo]
	%16: [-oo,+oo]
	%17: [-oo,+oo]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,-100]
: isModified: 1
Processing block 'return'
Apron: Instruction: 0: retval.0 <- phi ( entry -> -1 ) ( for.body.lr.ph -> %10 ) ( for.cond.preheader -> 0 )
return: interval of dim (12,0):
     %10 in [-oo,+oo]
     %13 in [-oo,+oo]
     %14 in [-oo,+oo]
     %15 in [-oo,+oo]
     %16 in [-oo,+oo]
     %17 in [-oo,+oo]
     %18 in [-oo,+oo]
     %19 in [-oo,+oo]
     %20 in [-oo,+oo]
     %21 in [-oo,+oo]
retval.0 in [-oo,+oo]
       y in [-oo,-100]

Ranges:
	%10: [-oo,+oo]
	%13: [-oo,+oo]
	%14: [-oo,+oo]
	%15: [-oo,+oo]
	%16: [-oo,+oo]
	%17: [-oo,+oo]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,-100]
: isModified: 0
Apron: Library box, version 1.0 with NUM_MPQ
entry: interval of dim (1,0): bottom

Ranges:
	y: [1,-1]

return: interval of dim (12,0):
     %10 in [-oo,+oo]
     %13 in [-oo,+oo]
     %14 in [-oo,+oo]
     %15 in [-oo,+oo]
     %16 in [-oo,+oo]
     %17 in [-oo,+oo]
     %18 in [-oo,+oo]
     %19 in [-oo,+oo]
     %20 in [-oo,+oo]
     %21 in [-oo,+oo]
retval.0 in [-oo,+oo]
       y in [-oo,-100]

Ranges:
	%10: [-oo,+oo]
	%13: [-oo,+oo]
	%14: [-oo,+oo]
	%15: [-oo,+oo]
	%16: [-oo,+oo]
	%17: [-oo,+oo]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,-100]

for.cond.preheader: interval of dim (3,0):
     %10 in [-oo,+oo]
retval.0 in [-oo,+oo]
       y in [-oo,-100]

Ranges:
	%10: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [+oo,-100]

for.body.lr.ph: interval of dim (12,0):
     %10 in [-oo,+oo]
     %13 in [-oo,+oo]
     %14 in [-oo,+oo]
     %15 in [-oo,+oo]
     %16 in [-oo,+oo]
     %17 in [-oo,+oo]
     %18 in [-oo,+oo]
     %19 in [-oo,+oo]
     %20 in [-oo,+oo]
     %21 in [-oo,+oo]
retval.0 in [-oo,+oo]
       y in [-oo,-100]

Ranges:
	%10: [-oo,+oo]
	%13: [-oo,+oo]
	%14: [-oo,+oo]
	%15: [-oo,+oo]
	%16: [-oo,+oo]
	%17: [-oo,+oo]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,-100]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f4
digraph "f4" {
	"entry" -> "if.then"
	"entry" -> "if.else"
	"if.then" -> "if.end"
	"if.else" -> "if.end"
}
Processing block 'entry'
Apron: Instruction: 36: %24 <- %24
Condition: cmp <- (y < 0)
Condition: cmp <- (y < 0)
Condition: cmp <- (y < 0)
Condition: cmp <- (y < 0)
entry: interval of dim (1,0): bottom

Ranges:
	y: [1,-1]
: isModified: 0
entry -> if.then
entry -> if.else
Processing block 'if.then'
Apron: Instruction: 37: add <- (7 - y)
Apron: Instruction: 39: %27 <- %27
if.then: interval of dim (2,0):
     add in [-oo,+oo]
       y in [-oo,0]

Ranges:
	add: [-oo,+oo]
	y: [-oo,0]
: isModified: 0
if.then -> if.end
Processing block 'if.else'
Apron: Instruction: 40: sub1 <- (y + -3)
Apron: Instruction: 41: sub2 <- (0 - y)
Apron: Instruction: 0: %30 <- %30
if.else: interval of dim (4,0):
     add in [-oo,+oo]
    sub1 in [-oo,+oo]
    sub2 in [-oo,+oo]
       y in [0,+oo]

Ranges:
	add: [-oo,+oo]
	sub1: [-oo,+oo]
	sub2: [-oo,+oo]
	y: [0,+oo]
: isModified: 0
if.else -> if.end
Processing block 'if.end'
Apron: Instruction: 0: z.0 <- phi ( if.then -> add ) ( if.else -> sub1 )
Apron: Instruction: 0: x.0 <- phi ( if.then -> y ) ( if.else -> sub2 )
Apron: Instruction: 43: add3 <- (x.0 + z.0)
if.end: interval of dim (7,0):
     add in [-oo,+oo]
    add3 in [-oo,+oo]
    sub1 in [-oo,+oo]
    sub2 in [-oo,+oo]
     x.0 in [-oo,+oo]
       y in [-oo,+oo]
     z.0 in [-oo,+oo]

Ranges:
	add: [-oo,+oo]
	add3: [-oo,+oo]
	sub1: [-oo,+oo]
	sub2: [-oo,+oo]
	x.0: [-oo,+oo]
	y: [-oo,+oo]
	z.0: [-oo,+oo]
: isModified: 1
Processing block 'if.end'
Apron: Instruction: 0: z.0 <- phi ( if.then -> add ) ( if.else -> sub1 )
Apron: Instruction: 0: x.0 <- phi ( if.then -> y ) ( if.else -> sub2 )
Apron: Instruction: 43: add3 <- (x.0 + z.0)
if.end: interval of dim (7,0):
     add in [-oo,+oo]
    add3 in [-oo,+oo]
    sub1 in [-oo,+oo]
    sub2 in [-oo,+oo]
     x.0 in [-oo,+oo]
       y in [-oo,+oo]
     z.0 in [-oo,+oo]

Ranges:
	add: [-oo,+oo]
	add3: [-oo,+oo]
	sub1: [-oo,+oo]
	sub2: [-oo,+oo]
	x.0: [-oo,+oo]
	y: [-oo,+oo]
	z.0: [-oo,+oo]
: isModified: 0
Apron: Library box, version 1.0 with NUM_MPQ
entry: interval of dim (1,0): bottom

Ranges:
	y: [1,-1]

if.then: interval of dim (2,0):
     add in [-oo,+oo]
       y in [-oo,0]

Ranges:
	add: [-oo,+oo]
	y: [-oo,0]

if.else: interval of dim (4,0):
     add in [-oo,+oo]
    sub1 in [-oo,+oo]
    sub2 in [-oo,+oo]
       y in [0,+oo]

Ranges:
	add: [-oo,+oo]
	sub1: [-oo,+oo]
	sub2: [-oo,+oo]
	y: [0,+oo]

if.end: interval of dim (7,0):
     add in [-oo,+oo]
    add3 in [-oo,+oo]
    sub1 in [-oo,+oo]
    sub2 in [-oo,+oo]
     x.0 in [-oo,+oo]
       y in [-oo,+oo]
     z.0 in [-oo,+oo]

Ranges:
	add: [-oo,+oo]
	add3: [-oo,+oo]
	sub1: [-oo,+oo]
	sub2: [-oo,+oo]
	x.0: [-oo,+oo]
	y: [-oo,+oo]
	z.0: [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
