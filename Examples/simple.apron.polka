WARNING: You're attempting to print out a bitcode file.
This is inadvisable as it may cause display problems. If
you REALLY want to taste LLVM bitcode first-hand, you
can force output with the `-f' option.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f
digraph "f" {
}
Processing block 'entry'
Apron: Instruction: 8: sub <- (0 - y)
Apron: Instruction: 7: x.0 <- ((y < 0) ? (0 - y) : 5)
entry: polyhedron of dim (3,0)
array of constraints of size 3
 0: sub + y = 0
 1: -sub + x.0 >= 0
 2: x.0 - 1 >= 0

Ranges:
	sub: [-oo,+oo]
	x.0: [1,+oo]
	y: [-oo,+oo]
: isModified: 0
Apron: Library polka, strict mode, version 3.0 with NUMINT_MPZ
entry: polyhedron of dim (3,0)
array of constraints of size 3
 0: sub + y = 0
 1: -sub + x.0 >= 0
 2: x.0 - 1 >= 0

Ranges:
	sub: [-oo,+oo]
	x.0: [1,+oo]
	y: [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f2
digraph "f2" {
}
Processing block 'entry'
Apron: Instruction: 18: sub <- (1 - y)
Apron: Instruction: 18: sub1 <- (sub - z)
entry: polyhedron of dim (4,0)
array of constraints of size 2
 0: -sub + sub1 + z = 0
 1: sub + y - 1 = 0

Ranges:
	sub: [-oo,+oo]
	sub1: [-oo,+oo]
	y: [-oo,+oo]
	z: [-oo,+oo]
: isModified: 0
Apron: Library polka, strict mode, version 3.0 with NUMINT_MPZ
entry: polyhedron of dim (4,0)
array of constraints of size 2
 0: -sub + sub1 + z = 0
 1: sub + y - 1 = 0

Ranges:
	sub: [-oo,+oo]
	sub1: [-oo,+oo]
	y: [-oo,+oo]
	z: [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f3
digraph "f3" {
	"for.cond.preheader" -> "for.body.lr.ph"
	"for.cond.preheader" -> "return"
	"for.body.lr.ph" -> "return"
	"entry" -> "return"
	"entry" -> "for.cond.preheader"
}
Processing block 'entry'
Apron: Instruction: 23: %9 <- %9
Condition: cmp <- (y > 100)
Condition: cmp <- (y > 100)
Condition: cmp <- (y > 100)
Condition: cmp <- (y > 100)
entry: empty polyhedron of dim (1,0)

Ranges:
	y: [1,-1]
: isModified: 0
entry -> return
entry -> for.cond.preheader
Processing block 'return'
Apron: Instruction: 0: retval.0 <- phi ( entry -> -1 ) ( for.body.lr.ph -> %10 ) ( for.cond.preheader -> 0 )
return: empty polyhedron of dim (3,0)

Ranges:
	%10: [1,-1]
	retval.0: [1,-1]
	y: [1,-1]
: isModified: 1
Processing block 'for.cond.preheader'
Apron: Instruction: 27: %12 <- %12
Condition: cmp16 <- (y > 1)
Condition: cmp16 <- (y > 1)
Condition: cmp16 <- (y > 1)
Condition: cmp16 <- (y > 1)
for.cond.preheader: polyhedron of dim (3,0)
array of constraints of size 1
 0: -y + 100 >= 0

Ranges:
	%10: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,100]
: isModified: 0
for.cond.preheader -> for.body.lr.ph
for.cond.preheader -> return
Processing block 'for.body.lr.ph'
Apron: Instruction: 27: %13 <- (y  <<  1)
Apron: Instruction: 27: %14 <- (y + -2)
Apron: Instruction: 0: %15 <- cast(%14)
Apron: Instruction: 27: %16 <- (y + -3)
Apron: Instruction: 0: %17 <- cast(%16)
Apron: Instruction: 27: %18 <- (%15 * %17)
Apron: Instruction: 27: %19 <- (%18  <<  1)
Apron: Instruction: 0: %20 <- cast(%19)
Apron: Instruction: 27: %21 <- (%13 + %20)
Apron: Instruction: 27: %10 <- (%21 + -3)
Apron: Instruction: 27: %22 <- %22
for.body.lr.ph: polyhedron of dim (12,0)
array of constraints of size 11
 0: -%10 + %21 - 3 = 0
 1: -%10 + %13 + %20 - 3 = 0
 2: -%10 + %13 + %19 - 3 = 0
 3: -%10 + %13 + 2%18 - 3 = 0
 4: -%13 + 2y = 0
 5: -%13 + 2%17 + 6 = 0
 6: -%13 + 2%16 + 6 = 0
 7: -%13 + 2%15 + 4 = 0
 8: -%13 + 2%14 + 4 = 0
 9: -%13 + 200 >= 0
10: %13 - 4 >= 0

Ranges:
	%10: [-oo,+oo]
	%13: [4,200]
	%14: [0,98]
	%15: [0,98]
	%16: [-1,97]
	%17: [-1,97]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [2,100]
: isModified: 1
for.body.lr.ph -> return
Processing block 'return'
Apron: Instruction: 0: retval.0 <- phi ( entry -> -1 ) ( for.body.lr.ph -> %10 ) ( for.cond.preheader -> 0 )
return: polyhedron of dim (12,0)
array of constraints of size 1
 0: -y + 100 >= 0

Ranges:
	%10: [-oo,+oo]
	%13: [-oo,+oo]
	%14: [-oo,+oo]
	%15: [-oo,+oo]
	%16: [-oo,+oo]
	%17: [-oo,+oo]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,100]
: isModified: 1
Processing block 'return'
Apron: Instruction: 0: retval.0 <- phi ( entry -> -1 ) ( for.body.lr.ph -> %10 ) ( for.cond.preheader -> 0 )
return: polyhedron of dim (12,0)
array of constraints of size 1
 0: -y + 100 >= 0

Ranges:
	%10: [-oo,+oo]
	%13: [-oo,+oo]
	%14: [-oo,+oo]
	%15: [-oo,+oo]
	%16: [-oo,+oo]
	%17: [-oo,+oo]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,100]
: isModified: 0
Apron: Library polka, strict mode, version 3.0 with NUMINT_MPZ
for.cond.preheader: polyhedron of dim (3,0)
array of constraints of size 1
 0: -y + 100 >= 0

Ranges:
	%10: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,100]

for.body.lr.ph: polyhedron of dim (12,0)
array of constraints of size 11
 0: -%10 + %21 - 3 = 0
 1: -%10 + %13 + %20 - 3 = 0
 2: -%10 + %13 + %19 - 3 = 0
 3: -%10 + %13 + 2%18 - 3 = 0
 4: -%13 + 2y = 0
 5: -%13 + 2%17 + 6 = 0
 6: -%13 + 2%16 + 6 = 0
 7: -%13 + 2%15 + 4 = 0
 8: -%13 + 2%14 + 4 = 0
 9: -%13 + 200 >= 0
10: %13 - 4 >= 0

Ranges:
	%10: [-oo,+oo]
	%13: [4,200]
	%14: [0,98]
	%15: [0,98]
	%16: [-1,97]
	%17: [-1,97]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [2,100]

entry: empty polyhedron of dim (1,0)

Ranges:
	y: [1,-1]

return: polyhedron of dim (12,0)
array of constraints of size 1
 0: -y + 100 >= 0

Ranges:
	%10: [-oo,+oo]
	%13: [-oo,+oo]
	%14: [-oo,+oo]
	%15: [-oo,+oo]
	%16: [-oo,+oo]
	%17: [-oo,+oo]
	%18: [-oo,+oo]
	%19: [-oo,+oo]
	%20: [-oo,+oo]
	%21: [-oo,+oo]
	retval.0: [-oo,+oo]
	y: [-oo,100]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f4
digraph "f4" {
	"if.else" -> "if.end"
	"entry" -> "if.then"
	"entry" -> "if.else"
	"if.then" -> "if.end"
}
Processing block 'entry'
Apron: Instruction: 36: %24 <- %24
Condition: cmp <- (y < 0)
Condition: cmp <- (y < 0)
Condition: cmp <- (y < 0)
Condition: cmp <- (y < 0)
entry: empty polyhedron of dim (1,0)

Ranges:
	y: [1,-1]
: isModified: 0
entry -> if.then
entry -> if.else
Processing block 'if.then'
Apron: Instruction: 37: add <- (7 - y)
Apron: Instruction: 39: %27 <- %27
if.then: polyhedron of dim (2,0)
array of constraints of size 2
 0: add + y - 7 = 0
 1: add - 8 >= 0

Ranges:
	add: [8,+oo]
	y: [-oo,-1]
: isModified: 1
if.then -> if.end
Processing block 'if.else'
Apron: Instruction: 40: sub1 <- (y + -3)
Apron: Instruction: 41: sub2 <- (0 - y)
Apron: Instruction: 0: %30 <- %30
if.else: polyhedron of dim (4,0)
array of constraints of size 3
 0: -sub1 + y - 3 = 0
 1: sub1 + sub2 + 3 = 0
 2: sub1 + 3 >= 0

Ranges:
	add: [-oo,+oo]
	sub1: [-3,+oo]
	sub2: [-oo,0]
	y: [0,+oo]
: isModified: 1
if.else -> if.end
Processing block 'if.end'
Apron: Instruction: 0: z.0 <- phi ( if.then -> add ) ( if.else -> sub1 )
Apron: Instruction: 0: x.0 <- phi ( if.then -> y ) ( if.else -> sub2 )
Apron: Instruction: 43: add3 <- (x.0 + z.0)
if.end: polyhedron of dim (7,0)
array of constraints of size 5
 0: -add3 + x.0 + z.0 = 0
 1: -x.0 - y >= 0
 2: -x.0 + y >= 0
 3: add3 - x.0 - y + 3 >= 0
 4: add3 - x.0 + y + 3 >= 0

Ranges:
	add: [-oo,+oo]
	add3: [-oo,+oo]
	sub1: [-oo,+oo]
	sub2: [-oo,+oo]
	x.0: [-oo,0]
	y: [-oo,+oo]
	z.0: [-3,+oo]
: isModified: 1
Processing block 'if.end'
Apron: Instruction: 0: z.0 <- phi ( if.then -> add ) ( if.else -> sub1 )
Apron: Instruction: 0: x.0 <- phi ( if.then -> y ) ( if.else -> sub2 )
Apron: Instruction: 43: add3 <- (x.0 + z.0)
if.end: polyhedron of dim (7,0)
array of constraints of size 5
 0: -add3 + x.0 + z.0 = 0
 1: -x.0 - y >= 0
 2: -x.0 + y >= 0
 3: add3 - x.0 - y + 3 >= 0
 4: add3 - x.0 + y + 3 >= 0

Ranges:
	add: [-oo,+oo]
	add3: [-oo,+oo]
	sub1: [-oo,+oo]
	sub2: [-oo,+oo]
	x.0: [-oo,0]
	y: [-oo,+oo]
	z.0: [-3,+oo]
: isModified: 0
Apron: Library polka, strict mode, version 3.0 with NUMINT_MPZ
if.else: polyhedron of dim (4,0)
array of constraints of size 3
 0: -sub1 + y - 3 = 0
 1: sub1 + sub2 + 3 = 0
 2: sub1 + 3 >= 0

Ranges:
	add: [-oo,+oo]
	sub1: [-3,+oo]
	sub2: [-oo,0]
	y: [0,+oo]

entry: empty polyhedron of dim (1,0)

Ranges:
	y: [1,-1]

if.then: polyhedron of dim (2,0)
array of constraints of size 2
 0: add + y - 7 = 0
 1: add - 8 >= 0

Ranges:
	add: [8,+oo]
	y: [-oo,-1]

if.end: polyhedron of dim (7,0)
array of constraints of size 5
 0: -add3 + x.0 + z.0 = 0
 1: -x.0 - y >= 0
 2: -x.0 + y >= 0
 3: add3 - x.0 - y + 3 >= 0
 4: add3 - x.0 + y + 3 >= 0

Ranges:
	add: [-oo,+oo]
	add3: [-oo,+oo]
	sub1: [-oo,+oo]
	sub2: [-oo,+oo]
	x.0: [-oo,0]
	y: [-oo,+oo]
	z.0: [-3,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
