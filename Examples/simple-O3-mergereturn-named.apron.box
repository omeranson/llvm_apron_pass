-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f
Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 2

entry: Variables:
interval of dim (3,0):
     sub in [-oo,+oo]
     x.0 in [1,+oo]
       y in [-oo,+oo]
Linear Condition:
x.0 - 1 >= 0
Tree Condition:
-1 + 1 * x.0 >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (3,0):
     sub in [-oo,+oo]
     x.0 in [1,+oo]
       y in [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f2
Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 2

entry: Variables:
interval of dim (4,0):
     sub in [-oo,+oo]
    sub1 in [-oo,+oo]
       y in [-oo,+oo]
       z in [-oo,+oo]
Linear Condition:
Tree Condition:

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (4,0):
     sub in [-oo,+oo]
    sub1 in [-oo,+oo]
       y in [-oo,+oo]
       z in [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f3
Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 2

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 14

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 14

entry: Variables:
interval of dim (1,0): bottom
Linear Condition:
-1 >= 0
Tree Condition:
-1 >= 0

for.cond.preheader: Variables:
interval of dim (1,0):
       y in [-oo,100]
Linear Condition:
-y + 100 >= 0
Tree Condition:
100 + -1 * y >= 0

for.body.lr.ph: Variables:
interval of dim (11,0):
     tmp in [-oo,200]
    tmp1 in [-oo,98]
    tmp2 in [-oo,98]
    tmp3 in [-oo,97]
    tmp4 in [-oo,97]
    tmp5 in [-oo,+oo]
    tmp6 in [-oo,+oo]
    tmp7 in [-oo,+oo]
    tmp8 in [-oo,+oo]
    tmp9 in [-oo,+oo]
       y in [-oo,100]
Linear Condition:
-tmp + 200 >= 0
-tmp1 + 98 >= 0
-tmp2 + 98 >= 0
-tmp3 + 97 >= 0
-tmp4 + 97 >= 0
-y + 100 >= 0
Tree Condition:
200 + -1 * tmp >= 0
98 + -1 * tmp1 >= 0
98 + -1 * tmp2 >= 0
97 + -1 * tmp3 >= 0
97 + -1 * tmp4 >= 0
100 + -1 * y >= 0

return: Variables:
interval of dim (12,0):
retval.0 in [0,0]
     tmp in [-oo,200]
    tmp1 in [-oo,98]
    tmp2 in [-oo,98]
    tmp3 in [-oo,97]
    tmp4 in [-oo,97]
    tmp5 in [-oo,+oo]
    tmp6 in [-oo,+oo]
    tmp7 in [-oo,+oo]
    tmp8 in [-oo,+oo]
    tmp9 in [-oo,+oo]
       y in [-oo,100]
Linear Condition:
retval.0 = 0
-tmp + 200 >= 0
-tmp1 + 98 >= 0
-tmp2 + 98 >= 0
-tmp3 + 97 >= 0
-tmp4 + 97 >= 0
-y + 100 >= 0
Tree Condition:
0 + 1 * retval.0 = 0
200 + -1 * tmp >= 0
98 + -1 * tmp1 >= 0
98 + -1 * tmp2 >= 0
97 + -1 * tmp3 >= 0
97 + -1 * tmp4 >= 0
100 + -1 * y >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (12,0):
retval.0 in [0,0]
     tmp in [-oo,200]
    tmp1 in [-oo,98]
    tmp2 in [-oo,98]
    tmp3 in [-oo,97]
    tmp4 in [-oo,97]
    tmp5 in [-oo,+oo]
    tmp6 in [-oo,+oo]
    tmp7 in [-oo,+oo]
    tmp8 in [-oo,+oo]
    tmp9 in [-oo,+oo]
       y in [-oo,100]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f4
Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 2

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 10

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 10

entry: Variables:
interval of dim (1,0): bottom
Linear Condition:
-1 >= 0
Tree Condition:
-1 >= 0

if.then: Variables:
interval of dim (2,0):
     add in [8,+oo]
       y in [-oo,-1]
Linear Condition:
add - 8 >= 0
-y - 1 >= 0
Tree Condition:
-8 + 1 * add >= 0
-1 + -1 * y >= 0

if.else: Variables:
interval of dim (3,0):
    sub1 in [-3,+oo]
    sub2 in [-oo,0]
       y in [0,+oo]
Linear Condition:
sub1 + 3 >= 0
-sub2 >= 0
y >= 0
Tree Condition:
3 + 1 * sub1 >= 0
0 + -1 * sub2 >= 0
0 + 1 * y >= 0

if.end: Variables:
interval of dim (7,0):
     add in [0,0]
    add3 in [-oo,+oo]
    sub1 in [-3,+oo]
    sub2 in [-oo,0]
     x.0 in [-oo,0]
       y in [0,+oo]
     z.0 in [-3,+oo]
Linear Condition:
add = 0
sub1 + 3 >= 0
-sub2 >= 0
-x.0 >= 0
y >= 0
z.0 + 3 >= 0
Tree Condition:
0 + 1 * add = 0
3 + 1 * sub1 >= 0
0 + -1 * sub2 >= 0
0 + -1 * x.0 >= 0
0 + 1 * y >= 0
3 + 1 * z.0 >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (7,0):
     add in [0,0]
    add3 in [-oo,+oo]
    sub1 in [-3,+oo]
    sub2 in [-oo,0]
     x.0 in [-oo,0]
       y in [0,+oo]
     z.0 in [-3,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f5
Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 2

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 10

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 10

entry: Variables:
interval of dim (1,0): bottom
Linear Condition:
-1 >= 0
Tree Condition:
-1 >= 0

if.else: Variables:
interval of dim (3,0):
    .sub in [1,+oo]
     sub in [1,+oo]
       y in [-oo,-1]
Linear Condition:
.sub - 1 >= 0
sub - 1 >= 0
-y - 1 >= 0
Tree Condition:
-1 + 1 * .sub >= 0
-1 + 1 * sub >= 0
-1 + -1 * y >= 0

return: Variables:
interval of dim (1,0):
       y in [0,+oo]
Linear Condition:
y >= 0
Tree Condition:
0 + 1 * y >= 0

UnifiedReturnBlock: Variables:
interval of dim (4,0):
    .sub in [1,+oo]
UnifiedRetVal in [0,+oo]
     sub in [1,+oo]
       y in [-oo,-1]
Linear Condition:
.sub - 1 >= 0
UnifiedRetVal >= 0
sub - 1 >= 0
-y - 1 >= 0
Tree Condition:
-1 + 1 * .sub >= 0
0 + 1 * UnifiedRetVal >= 0
-1 + 1 * sub >= 0
-1 + -1 * y >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (4,0):
    .sub in [1,+oo]
UnifiedRetVal in [0,+oo]
     sub in [1,+oo]
       y in [-oo,-1]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f6
Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 2

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 6

Joining: {'mpt':{},abstract1:{interval of dim (0,0):top
} and {'mpt':{},abstract1:{interval of dim (0,0):top
}
Joined. changed: 0 Abstract value: interval of dim (0,0):top

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 10

Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 10

entry: Variables:
interval of dim (1,0): bottom
Linear Condition:
-1 >= 0
Tree Condition:
-1 >= 0

if.else: Variables:
interval of dim (3,0):
       . in [-oo,+oo]
    cmp1 in [-oo,+oo]
       y in [0,+oo]
Linear Condition:
y >= 0
Tree Condition:
0 + 1 * y >= 0

if.end3: Variables:
interval of dim (1,0):
       y in [-oo,-1]
Linear Condition:
-y - 1 >= 0
Tree Condition:
-1 + -1 * y >= 0

UnifiedReturnBlock: Variables:
interval of dim (4,0):
       . in [-oo,+oo]
UnifiedRetVal in [-oo,+oo]
    cmp1 in [-oo,+oo]
       y in [0,+oo]
Linear Condition:
y >= 0
Tree Condition:
0 + 1 * y >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (4,0):
       . in [-oo,+oo]
UnifiedRetVal in [-oo,+oo]
    cmp1 in [-oo,+oo]
       y in [0,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f7
Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 2

entry: Variables:
interval of dim (2,0):
      .y in [-oo,30]
       y in [-oo,+oo]
Linear Condition:
-.y + 30 >= 0
Tree Condition:
30 + -1 * .y >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (2,0):
      .y in [-oo,30]
       y in [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f8
Updating: 0 maavs
Updated: Abstract value: interval of dim (0,0):top
environment: dim = (0,0), count = 2

entry: Variables:
interval of dim (3,0): bottom
Linear Condition:
-1 >= 0
Tree Condition:
-1 >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (3,0): bottom

